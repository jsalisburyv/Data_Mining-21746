tree_test_aux <- Tree_test[1,]
summary(Tree_test)
summary(tree_test_aux)
tree_test_aux[1,] = c(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
View(tree_test_aux)
tree_test_aux <- Tree_test[1,]
summary(Tree_test)
summary(tree_test_aux)
tree_test_aux[1,] = list(2022,MI, FT, Data Scientist, 0, ES, Hybrid, ES, S, Europe, Europe, DATA, FALSE, SCIENTIST, FALSE)
tree_test_aux <- Tree_test[1,]
summary(Tree_test)
summary(tree_test_aux)
tree_test_aux[1,] <- list(2022,MI, FT,"Data Scientist", 0, ES, Hybrid, ES, S, Europe, Europe, DATA, FALSE, SCIENTIST, FALSE)
tree_test_aux <- Tree_test[1,]
summary(Tree_test)
summary(tree_test_aux)
tree_test_aux[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
tree_test_aux <- Tree_test[1,]
summary(Tree_test)
summary(tree_test_aux)
tree_test_aux[2,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
View(datos_monica)
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"SE", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
View(rules1)
rpart.control(minbucket = 15)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova")
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, type="vector")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
rpart.control(minbucket = 50)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova")
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, type="vector")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
rpart.control(minbucket = 5)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova")
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, type="vector")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
rpart.control(minsplit = 5)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova")
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, type="vector")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
rpart.control(minsplit = 1)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova")
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, type="vector")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
rpart.control(minbucket = 3)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova")
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, type="vector")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
rpart.control(minbucket = 3)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova")
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"SE", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
View(rules1)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0.01))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0.001))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"SE", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0.009))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0.005))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0.003))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"SE", "FT", "Data Scientist", 0, "ES", "Remote", "ES", "M", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"SE", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Remote", "ES", "M", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
datos_monica <- Tree_test[1,]
datos_monica[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
monica <- predict(fit, datos_monica, type="vector")
monica
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "DE", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
salarios <- predict(fit, datos, type="vector")
salarios
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
salarios <- predict(fit, datos, type="vector")
salarios
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
salarios <- predict(fit, datos, type="vector", rules = TRUE)
salarios
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
salarios <- rpart.predict(fit, datos, type="vector", rules = TRUE)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
rpart.predict(fit, datos, type="vector", rules = TRUE)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
rpart.predict(fit, datos, type="vector")
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
rpart.predict(fit, datos, rules = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(ggdist)
library(tidyverse)
library(plotly)
library(networkD3)
library(scales)
library(reshape)
#library(klaR)
library(countrycode)
library(ISLR)
library(rpart)
library(rpart.plot)
set.seed(999)
df <- read.csv("salaries.csv", stringsAsFactors = TRUE)
summary(df)
str(df)
anyNA(df)
df$salary <- NULL
df$remote_ratio <- as.factor(df$remote_ratio)
levels(df$remote_ratio) <- list("Office" = 0, "Hybrid" = 50,  "Remote" = 100)
df$salary_group <- cut(df$salary_in_usd, c(0, 25000, 50000, 75000, 100000, 125000, 150000, 200000, 250000, 1000000))
df$salary_group <- as.factor(df$salary_group)
levels(df$salary_group) <- c("25k", "50k", "75k", "100k", "125k", "150k", "200k", "250k", "1M")
# group df$employee_residence to different regions in the world. The data is in ISO 3166-1 alpha-2 format. Regions like North America, Europe, Asia, etc.
northAmerica <-c("US", "CA", "MX")
southAmerica <- c("AR", "BO", "BR", "CL", "CO")
centralAmerica <- c("CR", "DO", "HN", "PR")
europe <- c("AL", "AT", "AX", "BE", "BG", "CH", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GB", "GR", "HR", "HU", "IE", "IS", "IT", "JE", "LU", "MD", "MT", "NL", "PL", "PT", "RO", "RS", "RU", "SI", "TR", "UA")
asia <- c("AE", "CN", "HK", "ID", "IL", "IN", "IQ", "IR", "JP", "MY", "PH", "PK", "QA", "SG", "TH", "VN")
africa <- c("DZ", "EG", "KE", "NG", "TN", "TZ")
oceania <- c("AU", "NZ", "AS")
df$employee_region <- as.factor(df$employee_residence)
levels(df$employee_region) <- list(
"North America" = northAmerica,
"South America" = southAmerica,
"Central America" = centralAmerica,
"Europe" = europe,
"Asia" = asia,
"Africa" = africa,
"Oceania" = oceania)
df$company_region <- as.factor(df$company_location)
levels(df$company_region) <- list(
"North America" = northAmerica,
"South America" = southAmerica,
"Central America" = centralAmerica,
"Europe" = europe,
"Asia" = asia,
"Africa" = africa,
"Oceania" = oceania)
aux <- data.frame(matrix(0, nrow = length(levels(df$company_region)), ncol = length(levels(df$company_region))))
colnames(aux) <- levels(df$company_region)
rownames(aux) <- levels(df$company_region)
for (i in 1:nrow(aux)) {
for (j in 1:ncol(aux)) {
aux[i, j] <- length(which(df$company_region == colnames(aux)[j] & df$employee_region == rownames(aux)[i]))
}
}
data_long <- aux %>%
rownames_to_column %>%
gather(key = 'key', value = 'value', -rowname) %>%
filter(value > 0)
colnames(data_long) <- c("source", "target", "value")
data_long$target <- paste(data_long$target, " ", sep="")
nodes <- data.frame(name=c(as.character(data_long$source), as.character(data_long$target)) %>% unique())
data_long$IDsource=match(data_long$source, nodes$name)-1
data_long$IDtarget=match(data_long$target, nodes$name)-1
sankeyNetwork(Links = data_long, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, nodeWidth=30, fontSize=14, nodePadding=15)
levels(factor(df$job_title))
df$industry <- ifelse( grepl("data", df$job_title, ignore.case = T), "DATA", "OTHER")
df$industry <- ifelse( grepl("machine", df$job_title, ignore.case = T), "ML/AI", df$industry)
df$industry <- ifelse( grepl("ML", df$job_title, ignore.case = T), "ML/AI", df$industry)
df$industry <- ifelse( grepl("AI", df$job_title, ignore.case = T), "ML/AI", df$industry)
df$industry <- as.factor(df$industry)
df$boss <- ifelse(grepl("head", df$job_title, ignore.case = T), TRUE, FALSE)
df$boss <- ifelse(grepl("lead", df$job_title, ignore.case = T), TRUE, df$boss)
df$boss <- ifelse(grepl("principal", df$job_title, ignore.case = T), TRUE, df$boss)
df$boss <- ifelse(grepl("director", df$job_title, ignore.case = T), TRUE, df$boss)
df$role <- ifelse(grepl("scientist", df$job_title, ignore.case = T), "SCIENTIST", "OTHER")
df$role <- ifelse(grepl("engineer", df$job_title, ignore.case = T), "ENGINEER", df$role)
df$role <- ifelse(grepl("analyst", df$job_title, ignore.case = T), "ANALYST", df$role)
df$role <- ifelse(grepl("manager", df$job_title, ignore.case = T), "MANAGER", df$role)
df$role <- ifelse(grepl("architect", df$job_title, ignore.case = T), "ARCHITECT", df$role)
df$role <- ifelse(grepl("developer", df$job_title, ignore.case = T), "DEVELOPER", df$role)
df$role <- as.factor(df$role)
df$research <- ifelse(grepl("research", df$job_title, ignore.case = T), TRUE, FALSE)
summary(df)
mean(df$salary_in_usd)
mean(df[df$boss == FALSE, 'salary_in_usd'])
mean(df[df$boss == TRUE, 'salary_in_usd'])
numerics_names <- colnames(df[, sapply(df, is.numeric)])
factors_names <- colnames(df[, sapply(df, is.factor)])
for (i in 1:length(numerics_names)){
print(ggplot(df, aes_string(x= numerics_names[i])) +
ggdist::stat_halfeye(
adjust=0.5,
justification = -.2,
.width=0
) +
geom_boxplot(
width = .1,
alpha = 0.5
) +
labs(title=paste("Distribution and boxplot of",numerics_names[i]), y="count"))
}
for (i in 1:length(factors_names)){
print(ggplot(df, aes_string(x= factors_names[i])) +
geom_bar()+
labs(title=paste("Histogram of",factors_names[i]),y="count"))
}
plot(df$employee_residence, df$salary_in_usd, xlab="Employee Residence", ylab="Salary in USD")
plot(df$company_size, df$salary_in_usd, xlab="Company Size", ylab="Salary in USD")
plot(df$company_location, df$salary_in_usd, xlab="Company Location", ylab="Salary in USD")
plot(df$experience_level, df$salary_in_usd, xlab="Experience Level", ylab="Salary in USD")
plot(df$remote_ratio, df$salary_in_usd, xlab="Remote Ratio", ylab="Salary in USD")
y_2020 <- df[df$work_year == 2020,]
y_2021 <- df[df$work_year == 2021,]
y_2022 <- df[df$work_year == 2022,]
y_2020 <- y_2020 %>% group_by(remote_ratio) %>% summarise(count = n())
y_2021 <- y_2021 %>% group_by(remote_ratio) %>% summarise(count = n())
y_2022 <- y_2022 %>% group_by(remote_ratio) %>% summarise(count = n())
y_2020$percentage <- y_2020$count / sum(y_2020$count) * 100
y_2021$percentage <- y_2021$count / sum(y_2021$count) * 100
y_2022$percentage <- y_2022$count / sum(y_2022$count) * 100
y_2020$work_year <- 2020
y_2021$work_year <- 2021
y_2022$work_year <- 2022
y <- rbind(y_2020, y_2021, y_2022)
ggplot(y, aes(x = work_year, y = percentage, group = remote_ratio, color = remote_ratio)) +
geom_line()+
geom_point() +
labs(x = "Work Year", y = "Percentage of Remote Ratio", title = "Remote Ratio by Work Year") +
theme(plot.title = element_text(hjust = 0.5), axis.text=element_text(size=12),
axis.title=element_text(size=12)) +
scale_x_continuous(breaks = c(2020, 2021, 2022))
# df_Q7 <- df
# # Make a graphic where experience_level = EN, y axis = salary_in_usd, x axis = country
# df_Q7 <- df_Q7[df_Q7$experience_level == 'EN',]
# df_Q7 <- df_Q7[df_Q7$remote_ratio == '0%',]
# df_Q7 <- df_Q7[df_Q7$boss == 'NO',]
# df_Q7 <- df_Q7[df_Q7$research == FALSE,]
# df_Q7 <- df_Q7[df_Q7$role == 'DEVELOPER',]
# df_Q7 <- df_Q7[df_Q7$work_year == 2022,]
# df_Q7 <- df_Q7[df_Q7$job_title == 'Software Engineer',]
# df_Q7 <- df_Q7[df_Q7$company_industry == 'Information Technology and Services',]
# df_Q7 <- df_Q7[df_Q7$company_sector == 'Information Technology',]
#
# plot(df$remote_ratio, df$salary_in_usd, xlab="Remote Ratio", ylab="Salary in USD")
#
# # Make a graphic where x axis = region, y axis = salary_in_usd
# plot(df$employee_region, df$salary_in_usd, xlab="employee_region", ylab="Salary in USD")
f <- ggplot(df, aes(x=reorder(experience_level,salary_in_usd), y=salary_in_usd))+
geom_boxplot()+
ggtitle("Salary Distribution for each experience level") + ylab("Salary (USD)") + xlab("")
f
set.seed(42)
df_split_industry <- split(df, df$industry)
names(df_split_industry) <- c("df_data", "df_ai", "df_other")
list2env(df_split_industry, envir = .GlobalEnv)
get_average_level_salary <- function(dFrame){
mean_en = mean(dFrame[dFrame$experience_level=="EN","salary_in_usd"])
mean_mi = mean(dFrame[dFrame$experience_level=="MI","salary_in_usd"])
mean_se = mean(dFrame[dFrame$experience_level=="SE","salary_in_usd"])
mean_ex = mean(dFrame[dFrame$experience_level=="EX","salary_in_usd"])
ret = data.frame(c("EN","MI","SE","EX"),c(mean_en, mean_mi, mean_se, mean_ex))
colnames(ret) <- c("Experience_Level","Average_Salary")
ret$Experience_Level = factor(ret$Experience_Level, levels = c("EN","MI","SE","EX"))
return(ret)
}
data_avg = get_average_level_salary(df_data)
ai_avg = get_average_level_salary(df_ai)
other_avg = get_average_level_salary(df_other)
custom_line_plot <- function(datos,avgs, title){
plot1 <- ggplot()+
geom_violin(data=datos, aes(x=reorder(experience_level,salary_in_usd), y = salary_in_usd))+
geom_line(data=avgs,aes(x=Experience_Level, y=Average_Salary, group=1))+
geom_point(data=avgs,aes(x=Experience_Level, y=Average_Salary, group=1))+
geom_text(data=avgs,aes(x=Experience_Level, y=Average_Salary, label = round(Average_Salary,0)) ,hjust=-0.2, vjust=-1)+
scale_y_continuous(breaks = scales::pretty_breaks(n = 15))+
labs(title=title)
plot1
}
custom_line_plot(df_data,data_avg,"Data Industry")
custom_line_plot(df_ai,ai_avg,"AI/ML Industry")
custom_line_plot(df_other, other_avg,"Other Industries")
library(rpart)
library(rpart.plot)
#First we remove some columns that wont apport useful information to the model:
dfTree <- df
dfTree$salary_currency <- NULL
#First we are going to try to predict salary with a regression tree. We are going to eliminate the created "salary_group" column because otherwise it would be kinda cheating
dfTreeRegression<- dfTree
dfTreeRegression$salary_group <- NULL
set.seed(42)
sample <- sample(c(TRUE, FALSE), nrow(dfTreeRegression), replace=TRUE, prob=c(0.8,0.2))
Tree_train  <- dfTreeRegression[sample, ]
Tree_test   <- dfTreeRegression[!sample, ]
fit <- rpart(salary_in_usd~., data = Tree_train, method="anova", control = list(cp = 0))
rules1 <- rpart.rules(fit)
test_pred <- predict(fit, Tree_test, method="anova")
results <- data.frame(test_pred, Tree_test$salary_in_usd)
results$residuals <- results$test_pred-results$Tree_test.salary_in_usd
plot(results$residuals)
abline(0,0, col="red")
mean(results$residuals)
sd(results$residuals)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
salarios <- rpart.predict(fit, datos, rules = TRUE)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
salarios <- rpart.predict(fit, datos)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
salarios <- rpart.predict(fit, datos)
salarios
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
salarios <- rpart.predict(fit, datos, rules = TRUE)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
salarios = rpart.predict(fit, datos, rules = TRUE)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
salarios <- NA
salarios = rpart.predict(fit, datos, rules = TRUE)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
datos$salarios <- NA
datos$salarios = rpart.predict(fit, datos, rules = TRUE)
#1: monica. 2: dawid
datos <- Tree_test[1,]
datos[1,] = list(2022,"MI", "FT", "Data Scientist", 0, "ES", "Hybrid", "ES", "S", "Europe", "Europe", "DATA", FALSE, "SCIENTIST", FALSE)
datos[2,] = list(2022,"MI", "FT", "ML Engineer", 0, "ES", "Hybrid", "ES", "L", "Europe", "Europe", "ML/AI", FALSE, "ENGINEER", FALSE)
options(width=1000)
salarios = rpart.predict(fit, datos)
salarios
